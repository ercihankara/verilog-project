// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2022 14:26:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    count
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module count_vlg_sample_tst(
	buffer1_o,
	buffer2_o,
	buffer3_o,
	buffer4_o,
	clk,
	sampler_tx
);
input [17:0] buffer1_o;
input [17:0] buffer2_o;
input [17:0] buffer3_o;
input [17:0] buffer4_o;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(buffer1_o or buffer2_o or buffer3_o or buffer4_o or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module count_vlg_check_tst (
	L1,
	L2,
	L3,
	L4,
	LS,
	RS,
	sampler_rx
);
input [2:0] L1;
input [2:0] L2;
input [2:0] L3;
input [2:0] L4;
input [5:0] LS;
input [5:0] RS;
input sampler_rx;

reg [2:0] L1_expected;
reg [2:0] L2_expected;
reg [2:0] L3_expected;
reg [2:0] L4_expected;
reg [5:0] LS_expected;
reg [5:0] RS_expected;

reg [2:0] L1_prev;
reg [2:0] L2_prev;
reg [2:0] L3_prev;
reg [2:0] L4_prev;
reg [5:0] LS_prev;
reg [5:0] RS_prev;

reg [2:0] L1_expected_prev;
reg [2:0] L2_expected_prev;
reg [2:0] L3_expected_prev;
reg [2:0] L4_expected_prev;
reg [5:0] LS_expected_prev;
reg [5:0] RS_expected_prev;

reg [2:0] last_L1_exp;
reg [2:0] last_L2_exp;
reg [2:0] last_L3_exp;
reg [2:0] last_L4_exp;
reg [5:0] last_LS_exp;
reg [5:0] last_RS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	LS_prev = LS;
	RS_prev = RS;
end

// update expected /o prevs

always @(trigger)
begin
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	LS_expected_prev = LS_expected;
	RS_expected_prev = RS_expected;
end


// expected L1[ 2 ]
initial
begin
	L1_expected[2] = 1'bX;
end 
// expected L1[ 1 ]
initial
begin
	L1_expected[1] = 1'bX;
end 
// expected L1[ 0 ]
initial
begin
	L1_expected[0] = 1'bX;
end 
// expected L2[ 2 ]
initial
begin
	L2_expected[2] = 1'bX;
end 
// expected L2[ 1 ]
initial
begin
	L2_expected[1] = 1'bX;
end 
// expected L2[ 0 ]
initial
begin
	L2_expected[0] = 1'bX;
end 
// expected L3[ 2 ]
initial
begin
	L3_expected[2] = 1'bX;
end 
// expected L3[ 1 ]
initial
begin
	L3_expected[1] = 1'bX;
end 
// expected L3[ 0 ]
initial
begin
	L3_expected[0] = 1'bX;
end 
// expected L4[ 2 ]
initial
begin
	L4_expected[2] = 1'bX;
end 
// expected L4[ 1 ]
initial
begin
	L4_expected[1] = 1'bX;
end 
// expected L4[ 0 ]
initial
begin
	L4_expected[0] = 1'bX;
end 
// expected LS[ 5 ]
initial
begin
	LS_expected[5] = 1'bX;
end 
// expected LS[ 4 ]
initial
begin
	LS_expected[4] = 1'bX;
end 
// expected LS[ 3 ]
initial
begin
	LS_expected[3] = 1'bX;
end 
// expected LS[ 2 ]
initial
begin
	LS_expected[2] = 1'bX;
end 
// expected LS[ 1 ]
initial
begin
	LS_expected[1] = 1'bX;
end 
// expected LS[ 0 ]
initial
begin
	LS_expected[0] = 1'bX;
end 
// expected RS[ 5 ]
initial
begin
	RS_expected[5] = 1'bX;
end 
// expected RS[ 4 ]
initial
begin
	RS_expected[4] = 1'bX;
end 
// expected RS[ 3 ]
initial
begin
	RS_expected[3] = 1'bX;
end 
// expected RS[ 2 ]
initial
begin
	RS_expected[2] = 1'bX;
end 
// expected RS[ 1 ]
initial
begin
	RS_expected[1] = 1'bX;
end 
// expected RS[ 0 ]
initial
begin
	RS_expected[0] = 1'bX;
end 
// generate trigger
always @(L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or LS_expected or LS or RS_expected or RS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected LS = %b | expected RS = %b | ",L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,LS_expected_prev,RS_expected_prev);
	$display("| real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real LS = %b | real RS = %b | ",L1_prev,L2_prev,L3_prev,L4_prev,LS_prev,RS_prev);
`endif
	if (
		( L1_expected_prev[0] !== 1'bx ) && ( L1_prev[0] !== L1_expected_prev[0] )
		&& ((L1_expected_prev[0] !== last_L1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_L1_exp[0] = L1_expected_prev[0];
	end
	if (
		( L1_expected_prev[1] !== 1'bx ) && ( L1_prev[1] !== L1_expected_prev[1] )
		&& ((L1_expected_prev[1] !== last_L1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_L1_exp[1] = L1_expected_prev[1];
	end
	if (
		( L1_expected_prev[2] !== 1'bx ) && ( L1_prev[2] !== L1_expected_prev[2] )
		&& ((L1_expected_prev[2] !== last_L1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_L1_exp[2] = L1_expected_prev[2];
	end
	if (
		( L2_expected_prev[0] !== 1'bx ) && ( L2_prev[0] !== L2_expected_prev[0] )
		&& ((L2_expected_prev[0] !== last_L2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L2_exp[0] = L2_expected_prev[0];
	end
	if (
		( L2_expected_prev[1] !== 1'bx ) && ( L2_prev[1] !== L2_expected_prev[1] )
		&& ((L2_expected_prev[1] !== last_L2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L2_exp[1] = L2_expected_prev[1];
	end
	if (
		( L2_expected_prev[2] !== 1'bx ) && ( L2_prev[2] !== L2_expected_prev[2] )
		&& ((L2_expected_prev[2] !== last_L2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L2_exp[2] = L2_expected_prev[2];
	end
	if (
		( L3_expected_prev[0] !== 1'bx ) && ( L3_prev[0] !== L3_expected_prev[0] )
		&& ((L3_expected_prev[0] !== last_L3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_L3_exp[0] = L3_expected_prev[0];
	end
	if (
		( L3_expected_prev[1] !== 1'bx ) && ( L3_prev[1] !== L3_expected_prev[1] )
		&& ((L3_expected_prev[1] !== last_L3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_L3_exp[1] = L3_expected_prev[1];
	end
	if (
		( L3_expected_prev[2] !== 1'bx ) && ( L3_prev[2] !== L3_expected_prev[2] )
		&& ((L3_expected_prev[2] !== last_L3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_L3_exp[2] = L3_expected_prev[2];
	end
	if (
		( L4_expected_prev[0] !== 1'bx ) && ( L4_prev[0] !== L4_expected_prev[0] )
		&& ((L4_expected_prev[0] !== last_L4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L4_exp[0] = L4_expected_prev[0];
	end
	if (
		( L4_expected_prev[1] !== 1'bx ) && ( L4_prev[1] !== L4_expected_prev[1] )
		&& ((L4_expected_prev[1] !== last_L4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L4_exp[1] = L4_expected_prev[1];
	end
	if (
		( L4_expected_prev[2] !== 1'bx ) && ( L4_prev[2] !== L4_expected_prev[2] )
		&& ((L4_expected_prev[2] !== last_L4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L4_exp[2] = L4_expected_prev[2];
	end
	if (
		( LS_expected_prev[0] !== 1'bx ) && ( LS_prev[0] !== LS_expected_prev[0] )
		&& ((LS_expected_prev[0] !== last_LS_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[0] = LS_expected_prev[0];
	end
	if (
		( LS_expected_prev[1] !== 1'bx ) && ( LS_prev[1] !== LS_expected_prev[1] )
		&& ((LS_expected_prev[1] !== last_LS_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[1] = LS_expected_prev[1];
	end
	if (
		( LS_expected_prev[2] !== 1'bx ) && ( LS_prev[2] !== LS_expected_prev[2] )
		&& ((LS_expected_prev[2] !== last_LS_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[2] = LS_expected_prev[2];
	end
	if (
		( LS_expected_prev[3] !== 1'bx ) && ( LS_prev[3] !== LS_expected_prev[3] )
		&& ((LS_expected_prev[3] !== last_LS_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[3] = LS_expected_prev[3];
	end
	if (
		( LS_expected_prev[4] !== 1'bx ) && ( LS_prev[4] !== LS_expected_prev[4] )
		&& ((LS_expected_prev[4] !== last_LS_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[4] = LS_expected_prev[4];
	end
	if (
		( LS_expected_prev[5] !== 1'bx ) && ( LS_prev[5] !== LS_expected_prev[5] )
		&& ((LS_expected_prev[5] !== last_LS_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LS_expected_prev);
		$display ("     Real value = %b", LS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LS_exp[5] = LS_expected_prev[5];
	end
	if (
		( RS_expected_prev[0] !== 1'bx ) && ( RS_prev[0] !== RS_expected_prev[0] )
		&& ((RS_expected_prev[0] !== last_RS_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[0] = RS_expected_prev[0];
	end
	if (
		( RS_expected_prev[1] !== 1'bx ) && ( RS_prev[1] !== RS_expected_prev[1] )
		&& ((RS_expected_prev[1] !== last_RS_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[1] = RS_expected_prev[1];
	end
	if (
		( RS_expected_prev[2] !== 1'bx ) && ( RS_prev[2] !== RS_expected_prev[2] )
		&& ((RS_expected_prev[2] !== last_RS_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[2] = RS_expected_prev[2];
	end
	if (
		( RS_expected_prev[3] !== 1'bx ) && ( RS_prev[3] !== RS_expected_prev[3] )
		&& ((RS_expected_prev[3] !== last_RS_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[3] = RS_expected_prev[3];
	end
	if (
		( RS_expected_prev[4] !== 1'bx ) && ( RS_prev[4] !== RS_expected_prev[4] )
		&& ((RS_expected_prev[4] !== last_RS_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[4] = RS_expected_prev[4];
	end
	if (
		( RS_expected_prev[5] !== 1'bx ) && ( RS_prev[5] !== RS_expected_prev[5] )
		&& ((RS_expected_prev[5] !== last_RS_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RS_exp[5] = RS_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module count_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [17:0] buffer1_o;
reg [17:0] buffer2_o;
reg [17:0] buffer3_o;
reg [17:0] buffer4_o;
reg clk;
// wires                                               
wire [2:0] L1;
wire [2:0] L2;
wire [2:0] L3;
wire [2:0] L4;
wire [5:0] LS;
wire [5:0] RS;

wire sampler;                             

// assign statements (if any)                          
count i1 (
// port map - connection between master ports and signals/registers   
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.LS(LS),
	.RS(RS),
	.buffer1_o(buffer1_o),
	.buffer2_o(buffer2_o),
	.buffer3_o(buffer3_o),
	.buffer4_o(buffer4_o),
	.clk(clk)
);
// buffer1_o[ 17 ]
initial
begin
	buffer1_o[17] = 1'b0;
end 
// buffer1_o[ 16 ]
initial
begin
	buffer1_o[16] = 1'b0;
end 
// buffer1_o[ 15 ]
initial
begin
	buffer1_o[15] = 1'b0;
end 
// buffer1_o[ 14 ]
initial
begin
	buffer1_o[14] = 1'b0;
end 
// buffer1_o[ 13 ]
initial
begin
	buffer1_o[13] = 1'b0;
end 
// buffer1_o[ 12 ]
initial
begin
	buffer1_o[12] = 1'b0;
end 
// buffer1_o[ 11 ]
initial
begin
	buffer1_o[11] = 1'b0;
end 
// buffer1_o[ 10 ]
initial
begin
	buffer1_o[10] = 1'b0;
end 
// buffer1_o[ 9 ]
initial
begin
	buffer1_o[9] = 1'b0;
end 
// buffer1_o[ 8 ]
initial
begin
	buffer1_o[8] = 1'b0;
end 
// buffer1_o[ 7 ]
initial
begin
	buffer1_o[7] = 1'b0;
end 
// buffer1_o[ 6 ]
initial
begin
	buffer1_o[6] = 1'b0;
	buffer1_o[6] = #640000 1'b1;
end 
// buffer1_o[ 5 ]
initial
begin
	buffer1_o[5] = 1'b0;
	buffer1_o[5] = #320000 1'b1;
	buffer1_o[5] = #320000 1'b0;
	buffer1_o[5] = #320000 1'b1;
end 
// buffer1_o[ 4 ]
initial
begin
	repeat(3)
	begin
		buffer1_o[4] = 1'b0;
		buffer1_o[4] = #160000 1'b1;
		# 160000;
	end
	buffer1_o[4] = 1'b0;
end 
// buffer1_o[ 3 ]
initial
begin
	repeat(6)
	begin
		buffer1_o[3] = 1'b0;
		buffer1_o[3] = #80000 1'b1;
		# 80000;
	end
	buffer1_o[3] = 1'b0;
end 
// buffer1_o[ 2 ]
initial
begin
	buffer1_o[2] = 1'b0;
end 
// buffer1_o[ 1 ]
initial
begin
	buffer1_o[1] = 1'b0;
end 
// buffer1_o[ 0 ]
initial
begin
	buffer1_o[0] = 1'b1;
end 
// buffer2_o[ 17 ]
initial
begin
	buffer2_o[17] = 1'b0;
end 
// buffer2_o[ 16 ]
initial
begin
	buffer2_o[16] = 1'b0;
end 
// buffer2_o[ 15 ]
initial
begin
	buffer2_o[15] = 1'b0;
end 
// buffer2_o[ 14 ]
initial
begin
	buffer2_o[14] = 1'b0;
end 
// buffer2_o[ 13 ]
initial
begin
	buffer2_o[13] = 1'b0;
end 
// buffer2_o[ 12 ]
initial
begin
	buffer2_o[12] = 1'b0;
end 
// buffer2_o[ 11 ]
initial
begin
	buffer2_o[11] = 1'b0;
end 
// buffer2_o[ 10 ]
initial
begin
	buffer2_o[10] = 1'b0;
end 
// buffer2_o[ 9 ]
initial
begin
	buffer2_o[9] = 1'b0;
end 
// buffer2_o[ 8 ]
initial
begin
	buffer2_o[8] = 1'b0;
	buffer2_o[8] = #80000 1'b1;
end 
// buffer2_o[ 7 ]
initial
begin
	buffer2_o[7] = 1'b1;
	buffer2_o[7] = #80000 1'b0;
end 
// buffer2_o[ 6 ]
initial
begin
	buffer2_o[6] = 1'b1;
	buffer2_o[6] = #80000 1'b0;
	buffer2_o[6] = #640000 1'b1;
end 
// buffer2_o[ 5 ]
initial
begin
	buffer2_o[5] = 1'b1;
	buffer2_o[5] = #80000 1'b0;
	buffer2_o[5] = #320000 1'b1;
	buffer2_o[5] = #320000 1'b0;
end 
// buffer2_o[ 4 ]
initial
begin
	buffer2_o[4] = 1'b1;
	# 80000;
	repeat(2)
	begin
		buffer2_o[4] = 1'b0;
		buffer2_o[4] = #160000 1'b1;
		# 160000;
	end
	buffer2_o[4] = 1'b0;
	buffer2_o[4] = #160000 1'b1;
end 
// buffer2_o[ 3 ]
initial
begin
	repeat(6)
	begin
		buffer2_o[3] = 1'b1;
		buffer2_o[3] = #80000 1'b0;
		# 80000;
	end
	buffer2_o[3] = 1'b1;
end 
// buffer2_o[ 2 ]
initial
begin
	buffer2_o[2] = 1'b1;
end 
// buffer2_o[ 1 ]
initial
begin
	buffer2_o[1] = 1'b1;
end 
// buffer2_o[ 0 ]
initial
begin
	buffer2_o[0] = 1'b1;
end 
// buffer3_o[ 17 ]
initial
begin
	buffer3_o[17] = 1'b0;
end 
// buffer3_o[ 16 ]
initial
begin
	buffer3_o[16] = 1'b0;
end 
// buffer3_o[ 15 ]
initial
begin
	buffer3_o[15] = 1'b0;
end 
// buffer3_o[ 14 ]
initial
begin
	buffer3_o[14] = 1'b0;
end 
// buffer3_o[ 13 ]
initial
begin
	buffer3_o[13] = 1'b0;
end 
// buffer3_o[ 12 ]
initial
begin
	buffer3_o[12] = 1'b0;
end 
// buffer3_o[ 11 ]
initial
begin
	buffer3_o[11] = 1'b0;
end 
// buffer3_o[ 10 ]
initial
begin
	buffer3_o[10] = 1'b0;
end 
// buffer3_o[ 9 ]
initial
begin
	buffer3_o[9] = 1'b0;
end 
// buffer3_o[ 8 ]
initial
begin
	buffer3_o[8] = 1'b0;
end 
// buffer3_o[ 7 ]
initial
begin
	buffer3_o[7] = 1'b0;
	buffer3_o[7] = #640000 1'b1;
end 
// buffer3_o[ 6 ]
initial
begin
	buffer3_o[6] = 1'b0;
	buffer3_o[6] = #320000 1'b1;
	buffer3_o[6] = #320000 1'b0;
	buffer3_o[6] = #320000 1'b1;
end 
// buffer3_o[ 5 ]
initial
begin
	repeat(3)
	begin
		buffer3_o[5] = 1'b0;
		buffer3_o[5] = #160000 1'b1;
		# 160000;
	end
	buffer3_o[5] = 1'b0;
end 
// buffer3_o[ 4 ]
initial
begin
	repeat(6)
	begin
		buffer3_o[4] = 1'b0;
		buffer3_o[4] = #80000 1'b1;
		# 80000;
	end
	buffer3_o[4] = 1'b0;
end 
// buffer3_o[ 3 ]
initial
begin
	buffer3_o[3] = 1'b1;
end 
// buffer3_o[ 2 ]
initial
begin
	buffer3_o[2] = 1'b0;
end 
// buffer3_o[ 1 ]
initial
begin
	buffer3_o[1] = 1'b0;
end 
// buffer3_o[ 0 ]
initial
begin
	buffer3_o[0] = 1'b0;
end 
// buffer4_o[ 17 ]
initial
begin
	buffer4_o[17] = 1'b0;
end 
// buffer4_o[ 16 ]
initial
begin
	buffer4_o[16] = 1'b1;
end 
// buffer4_o[ 15 ]
initial
begin
	buffer4_o[15] = 1'b1;
end 
// buffer4_o[ 14 ]
initial
begin
	buffer4_o[14] = 1'b1;
end 
// buffer4_o[ 13 ]
initial
begin
	buffer4_o[13] = 1'b1;
end 
// buffer4_o[ 12 ]
initial
begin
	buffer4_o[12] = 1'b1;
end 
// buffer4_o[ 11 ]
initial
begin
	buffer4_o[11] = 1'b1;
end 
// buffer4_o[ 10 ]
initial
begin
	buffer4_o[10] = 1'b1;
end 
// buffer4_o[ 9 ]
initial
begin
	buffer4_o[9] = 1'b0;
end 
// buffer4_o[ 8 ]
initial
begin
	buffer4_o[8] = 1'b0;
end 
// buffer4_o[ 7 ]
initial
begin
	buffer4_o[7] = 1'b0;
end 
// buffer4_o[ 6 ]
initial
begin
	buffer4_o[6] = 1'b0;
	buffer4_o[6] = #640000 1'b1;
end 
// buffer4_o[ 5 ]
initial
begin
	buffer4_o[5] = 1'b0;
	buffer4_o[5] = #320000 1'b1;
	buffer4_o[5] = #320000 1'b0;
	buffer4_o[5] = #320000 1'b1;
end 
// buffer4_o[ 4 ]
initial
begin
	repeat(3)
	begin
		buffer4_o[4] = 1'b0;
		buffer4_o[4] = #160000 1'b1;
		# 160000;
	end
	buffer4_o[4] = 1'b0;
end 
// buffer4_o[ 3 ]
initial
begin
	repeat(6)
	begin
		buffer4_o[3] = 1'b0;
		buffer4_o[3] = #80000 1'b1;
		# 80000;
	end
	buffer4_o[3] = 1'b0;
end 
// buffer4_o[ 2 ]
initial
begin
	buffer4_o[2] = 1'b0;
end 
// buffer4_o[ 1 ]
initial
begin
	buffer4_o[1] = 1'b0;
end 
// buffer4_o[ 0 ]
initial
begin
	buffer4_o[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

count_vlg_sample_tst tb_sample (
	.buffer1_o(buffer1_o),
	.buffer2_o(buffer2_o),
	.buffer3_o(buffer3_o),
	.buffer4_o(buffer4_o),
	.clk(clk),
	.sampler_tx(sampler)
);

count_vlg_check_tst tb_out(
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.LS(LS),
	.RS(RS),
	.sampler_rx(sampler)
);
endmodule

