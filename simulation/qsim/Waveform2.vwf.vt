// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2022 03:09:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    take_in
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module take_in_vlg_sample_tst(
	clk,
	key0,
	key1,
	start,
	swa,
	sampler_tx
);
input  clk;
input  key0;
input  key1;
input  start;
input  swa;
output sampler_tx;

reg sample;
time current_time;
always @(clk or key0 or key1 or start or swa)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module take_in_vlg_check_tst (
	buffer1,
	buffer2,
	buffer3,
	buffer4,
	data,
	drops,
	holder,
	opener,
	outputer,
	received_data,
	sampler_rx
);
input [18:0] buffer1;
input [18:0] buffer2;
input [18:0] buffer3;
input [18:0] buffer4;
input [4:0] data;
input  drops;
input [3:0] holder;
input  opener;
input [4:0] outputer;
input  received_data;
input sampler_rx;

reg [18:0] buffer1_expected;
reg [18:0] buffer2_expected;
reg [18:0] buffer3_expected;
reg [18:0] buffer4_expected;
reg [4:0] data_expected;
reg  drops_expected;
reg [3:0] holder_expected;
reg  opener_expected;
reg [4:0] outputer_expected;
reg  received_data_expected;

reg [18:0] buffer1_prev;
reg [18:0] buffer2_prev;
reg [18:0] buffer3_prev;
reg [18:0] buffer4_prev;
reg [4:0] data_prev;
reg  drops_prev;
reg [3:0] holder_prev;
reg  opener_prev;
reg [4:0] outputer_prev;
reg  received_data_prev;

reg [18:0] buffer1_expected_prev;
reg [18:0] buffer2_expected_prev;
reg [18:0] buffer3_expected_prev;
reg [18:0] buffer4_expected_prev;
reg [4:0] data_expected_prev;

reg [18:0] last_buffer1_exp;
reg [18:0] last_buffer2_exp;
reg [18:0] last_buffer3_exp;
reg [18:0] last_buffer4_exp;
reg [4:0] last_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	buffer1_prev = buffer1;
	buffer2_prev = buffer2;
	buffer3_prev = buffer3;
	buffer4_prev = buffer4;
	data_prev = data;
	drops_prev = drops;
	holder_prev = holder;
	opener_prev = opener;
	outputer_prev = outputer;
	received_data_prev = received_data;
end

// update expected /o prevs

always @(trigger)
begin
	buffer1_expected_prev = buffer1_expected;
	buffer2_expected_prev = buffer2_expected;
	buffer3_expected_prev = buffer3_expected;
	buffer4_expected_prev = buffer4_expected;
	data_expected_prev = data_expected;
end


// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 
// expected buffer1[ 18 ]
initial
begin
	buffer1_expected[18] = 1'bX;
end 
// expected buffer1[ 17 ]
initial
begin
	buffer1_expected[17] = 1'bX;
end 
// expected buffer1[ 16 ]
initial
begin
	buffer1_expected[16] = 1'bX;
end 
// expected buffer1[ 15 ]
initial
begin
	buffer1_expected[15] = 1'bX;
end 
// expected buffer1[ 14 ]
initial
begin
	buffer1_expected[14] = 1'bX;
end 
// expected buffer1[ 13 ]
initial
begin
	buffer1_expected[13] = 1'bX;
end 
// expected buffer1[ 12 ]
initial
begin
	buffer1_expected[12] = 1'bX;
end 
// expected buffer1[ 11 ]
initial
begin
	buffer1_expected[11] = 1'bX;
end 
// expected buffer1[ 10 ]
initial
begin
	buffer1_expected[10] = 1'bX;
end 
// expected buffer1[ 9 ]
initial
begin
	buffer1_expected[9] = 1'bX;
end 
// expected buffer1[ 8 ]
initial
begin
	buffer1_expected[8] = 1'bX;
end 
// expected buffer1[ 7 ]
initial
begin
	buffer1_expected[7] = 1'bX;
end 
// expected buffer1[ 6 ]
initial
begin
	buffer1_expected[6] = 1'bX;
end 
// expected buffer1[ 5 ]
initial
begin
	buffer1_expected[5] = 1'bX;
end 
// expected buffer1[ 4 ]
initial
begin
	buffer1_expected[4] = 1'bX;
end 
// expected buffer1[ 3 ]
initial
begin
	buffer1_expected[3] = 1'bX;
end 
// expected buffer1[ 2 ]
initial
begin
	buffer1_expected[2] = 1'bX;
end 
// expected buffer1[ 1 ]
initial
begin
	buffer1_expected[1] = 1'bX;
end 
// expected buffer1[ 0 ]
initial
begin
	buffer1_expected[0] = 1'bX;
end 
// expected buffer2[ 18 ]
initial
begin
	buffer2_expected[18] = 1'bX;
end 
// expected buffer2[ 17 ]
initial
begin
	buffer2_expected[17] = 1'bX;
end 
// expected buffer2[ 16 ]
initial
begin
	buffer2_expected[16] = 1'bX;
end 
// expected buffer2[ 15 ]
initial
begin
	buffer2_expected[15] = 1'bX;
end 
// expected buffer2[ 14 ]
initial
begin
	buffer2_expected[14] = 1'bX;
end 
// expected buffer2[ 13 ]
initial
begin
	buffer2_expected[13] = 1'bX;
end 
// expected buffer2[ 12 ]
initial
begin
	buffer2_expected[12] = 1'bX;
end 
// expected buffer2[ 11 ]
initial
begin
	buffer2_expected[11] = 1'bX;
end 
// expected buffer2[ 10 ]
initial
begin
	buffer2_expected[10] = 1'bX;
end 
// expected buffer2[ 9 ]
initial
begin
	buffer2_expected[9] = 1'bX;
end 
// expected buffer2[ 8 ]
initial
begin
	buffer2_expected[8] = 1'bX;
end 
// expected buffer2[ 7 ]
initial
begin
	buffer2_expected[7] = 1'bX;
end 
// expected buffer2[ 6 ]
initial
begin
	buffer2_expected[6] = 1'bX;
end 
// expected buffer2[ 5 ]
initial
begin
	buffer2_expected[5] = 1'bX;
end 
// expected buffer2[ 4 ]
initial
begin
	buffer2_expected[4] = 1'bX;
end 
// expected buffer2[ 3 ]
initial
begin
	buffer2_expected[3] = 1'bX;
end 
// expected buffer2[ 2 ]
initial
begin
	buffer2_expected[2] = 1'bX;
end 
// expected buffer2[ 1 ]
initial
begin
	buffer2_expected[1] = 1'bX;
end 
// expected buffer2[ 0 ]
initial
begin
	buffer2_expected[0] = 1'bX;
end 
// expected buffer3[ 18 ]
initial
begin
	buffer3_expected[18] = 1'bX;
end 
// expected buffer3[ 17 ]
initial
begin
	buffer3_expected[17] = 1'bX;
end 
// expected buffer3[ 16 ]
initial
begin
	buffer3_expected[16] = 1'bX;
end 
// expected buffer3[ 15 ]
initial
begin
	buffer3_expected[15] = 1'bX;
end 
// expected buffer3[ 14 ]
initial
begin
	buffer3_expected[14] = 1'bX;
end 
// expected buffer3[ 13 ]
initial
begin
	buffer3_expected[13] = 1'bX;
end 
// expected buffer3[ 12 ]
initial
begin
	buffer3_expected[12] = 1'bX;
end 
// expected buffer3[ 11 ]
initial
begin
	buffer3_expected[11] = 1'bX;
end 
// expected buffer3[ 10 ]
initial
begin
	buffer3_expected[10] = 1'bX;
end 
// expected buffer3[ 9 ]
initial
begin
	buffer3_expected[9] = 1'bX;
end 
// expected buffer3[ 8 ]
initial
begin
	buffer3_expected[8] = 1'bX;
end 
// expected buffer3[ 7 ]
initial
begin
	buffer3_expected[7] = 1'bX;
end 
// expected buffer3[ 6 ]
initial
begin
	buffer3_expected[6] = 1'bX;
end 
// expected buffer3[ 5 ]
initial
begin
	buffer3_expected[5] = 1'bX;
end 
// expected buffer3[ 4 ]
initial
begin
	buffer3_expected[4] = 1'bX;
end 
// expected buffer3[ 3 ]
initial
begin
	buffer3_expected[3] = 1'bX;
end 
// expected buffer3[ 2 ]
initial
begin
	buffer3_expected[2] = 1'bX;
end 
// expected buffer3[ 1 ]
initial
begin
	buffer3_expected[1] = 1'bX;
end 
// expected buffer3[ 0 ]
initial
begin
	buffer3_expected[0] = 1'bX;
end 
// expected buffer4[ 18 ]
initial
begin
	buffer4_expected[18] = 1'bX;
end 
// expected buffer4[ 17 ]
initial
begin
	buffer4_expected[17] = 1'bX;
end 
// expected buffer4[ 16 ]
initial
begin
	buffer4_expected[16] = 1'bX;
end 
// expected buffer4[ 15 ]
initial
begin
	buffer4_expected[15] = 1'bX;
end 
// expected buffer4[ 14 ]
initial
begin
	buffer4_expected[14] = 1'bX;
end 
// expected buffer4[ 13 ]
initial
begin
	buffer4_expected[13] = 1'bX;
end 
// expected buffer4[ 12 ]
initial
begin
	buffer4_expected[12] = 1'bX;
end 
// expected buffer4[ 11 ]
initial
begin
	buffer4_expected[11] = 1'bX;
end 
// expected buffer4[ 10 ]
initial
begin
	buffer4_expected[10] = 1'bX;
end 
// expected buffer4[ 9 ]
initial
begin
	buffer4_expected[9] = 1'bX;
end 
// expected buffer4[ 8 ]
initial
begin
	buffer4_expected[8] = 1'bX;
end 
// expected buffer4[ 7 ]
initial
begin
	buffer4_expected[7] = 1'bX;
end 
// expected buffer4[ 6 ]
initial
begin
	buffer4_expected[6] = 1'bX;
end 
// expected buffer4[ 5 ]
initial
begin
	buffer4_expected[5] = 1'bX;
end 
// expected buffer4[ 4 ]
initial
begin
	buffer4_expected[4] = 1'bX;
end 
// expected buffer4[ 3 ]
initial
begin
	buffer4_expected[3] = 1'bX;
end 
// expected buffer4[ 2 ]
initial
begin
	buffer4_expected[2] = 1'bX;
end 
// expected buffer4[ 1 ]
initial
begin
	buffer4_expected[1] = 1'bX;
end 
// expected buffer4[ 0 ]
initial
begin
	buffer4_expected[0] = 1'bX;
end 
// generate trigger
always @(buffer1_expected or buffer1 or buffer2_expected or buffer2 or buffer3_expected or buffer3 or buffer4_expected or buffer4 or data_expected or data or drops_expected or drops or holder_expected or holder or opener_expected or opener or outputer_expected or outputer or received_data_expected or received_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected buffer1 = %b | expected buffer2 = %b | expected buffer3 = %b | expected buffer4 = %b | expected data = %b | expected drops = %b | expected holder = %b | expected opener = %b | expected outputer = %b | expected received_data = %b | ",buffer1_expected_prev,buffer2_expected_prev,buffer3_expected_prev,buffer4_expected_prev,data_expected_prev,drops_expected_prev,holder_expected_prev,opener_expected_prev,outputer_expected_prev,received_data_expected_prev);
	$display("| real buffer1 = %b | real buffer2 = %b | real buffer3 = %b | real buffer4 = %b | real data = %b | real drops = %b | real holder = %b | real opener = %b | real outputer = %b | real received_data = %b | ",buffer1_prev,buffer2_prev,buffer3_prev,buffer4_prev,data_prev,drops_prev,holder_prev,opener_prev,outputer_prev,received_data_prev);
`endif
	if (
		( buffer1_expected_prev[0] !== 1'bx ) && ( buffer1_prev[0] !== buffer1_expected_prev[0] )
		&& ((buffer1_expected_prev[0] !== last_buffer1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[0] = buffer1_expected_prev[0];
	end
	if (
		( buffer1_expected_prev[1] !== 1'bx ) && ( buffer1_prev[1] !== buffer1_expected_prev[1] )
		&& ((buffer1_expected_prev[1] !== last_buffer1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[1] = buffer1_expected_prev[1];
	end
	if (
		( buffer1_expected_prev[2] !== 1'bx ) && ( buffer1_prev[2] !== buffer1_expected_prev[2] )
		&& ((buffer1_expected_prev[2] !== last_buffer1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[2] = buffer1_expected_prev[2];
	end
	if (
		( buffer1_expected_prev[3] !== 1'bx ) && ( buffer1_prev[3] !== buffer1_expected_prev[3] )
		&& ((buffer1_expected_prev[3] !== last_buffer1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[3] = buffer1_expected_prev[3];
	end
	if (
		( buffer1_expected_prev[4] !== 1'bx ) && ( buffer1_prev[4] !== buffer1_expected_prev[4] )
		&& ((buffer1_expected_prev[4] !== last_buffer1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[4] = buffer1_expected_prev[4];
	end
	if (
		( buffer1_expected_prev[5] !== 1'bx ) && ( buffer1_prev[5] !== buffer1_expected_prev[5] )
		&& ((buffer1_expected_prev[5] !== last_buffer1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[5] = buffer1_expected_prev[5];
	end
	if (
		( buffer1_expected_prev[6] !== 1'bx ) && ( buffer1_prev[6] !== buffer1_expected_prev[6] )
		&& ((buffer1_expected_prev[6] !== last_buffer1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[6] = buffer1_expected_prev[6];
	end
	if (
		( buffer1_expected_prev[7] !== 1'bx ) && ( buffer1_prev[7] !== buffer1_expected_prev[7] )
		&& ((buffer1_expected_prev[7] !== last_buffer1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[7] = buffer1_expected_prev[7];
	end
	if (
		( buffer1_expected_prev[8] !== 1'bx ) && ( buffer1_prev[8] !== buffer1_expected_prev[8] )
		&& ((buffer1_expected_prev[8] !== last_buffer1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[8] = buffer1_expected_prev[8];
	end
	if (
		( buffer1_expected_prev[9] !== 1'bx ) && ( buffer1_prev[9] !== buffer1_expected_prev[9] )
		&& ((buffer1_expected_prev[9] !== last_buffer1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[9] = buffer1_expected_prev[9];
	end
	if (
		( buffer1_expected_prev[10] !== 1'bx ) && ( buffer1_prev[10] !== buffer1_expected_prev[10] )
		&& ((buffer1_expected_prev[10] !== last_buffer1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[10] = buffer1_expected_prev[10];
	end
	if (
		( buffer1_expected_prev[11] !== 1'bx ) && ( buffer1_prev[11] !== buffer1_expected_prev[11] )
		&& ((buffer1_expected_prev[11] !== last_buffer1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[11] = buffer1_expected_prev[11];
	end
	if (
		( buffer1_expected_prev[12] !== 1'bx ) && ( buffer1_prev[12] !== buffer1_expected_prev[12] )
		&& ((buffer1_expected_prev[12] !== last_buffer1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[12] = buffer1_expected_prev[12];
	end
	if (
		( buffer1_expected_prev[13] !== 1'bx ) && ( buffer1_prev[13] !== buffer1_expected_prev[13] )
		&& ((buffer1_expected_prev[13] !== last_buffer1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[13] = buffer1_expected_prev[13];
	end
	if (
		( buffer1_expected_prev[14] !== 1'bx ) && ( buffer1_prev[14] !== buffer1_expected_prev[14] )
		&& ((buffer1_expected_prev[14] !== last_buffer1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[14] = buffer1_expected_prev[14];
	end
	if (
		( buffer1_expected_prev[15] !== 1'bx ) && ( buffer1_prev[15] !== buffer1_expected_prev[15] )
		&& ((buffer1_expected_prev[15] !== last_buffer1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[15] = buffer1_expected_prev[15];
	end
	if (
		( buffer1_expected_prev[16] !== 1'bx ) && ( buffer1_prev[16] !== buffer1_expected_prev[16] )
		&& ((buffer1_expected_prev[16] !== last_buffer1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[16] = buffer1_expected_prev[16];
	end
	if (
		( buffer1_expected_prev[17] !== 1'bx ) && ( buffer1_prev[17] !== buffer1_expected_prev[17] )
		&& ((buffer1_expected_prev[17] !== last_buffer1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[17] = buffer1_expected_prev[17];
	end
	if (
		( buffer1_expected_prev[18] !== 1'bx ) && ( buffer1_prev[18] !== buffer1_expected_prev[18] )
		&& ((buffer1_expected_prev[18] !== last_buffer1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer1_expected_prev);
		$display ("     Real value = %b", buffer1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_buffer1_exp[18] = buffer1_expected_prev[18];
	end
	if (
		( buffer2_expected_prev[0] !== 1'bx ) && ( buffer2_prev[0] !== buffer2_expected_prev[0] )
		&& ((buffer2_expected_prev[0] !== last_buffer2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[0] = buffer2_expected_prev[0];
	end
	if (
		( buffer2_expected_prev[1] !== 1'bx ) && ( buffer2_prev[1] !== buffer2_expected_prev[1] )
		&& ((buffer2_expected_prev[1] !== last_buffer2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[1] = buffer2_expected_prev[1];
	end
	if (
		( buffer2_expected_prev[2] !== 1'bx ) && ( buffer2_prev[2] !== buffer2_expected_prev[2] )
		&& ((buffer2_expected_prev[2] !== last_buffer2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[2] = buffer2_expected_prev[2];
	end
	if (
		( buffer2_expected_prev[3] !== 1'bx ) && ( buffer2_prev[3] !== buffer2_expected_prev[3] )
		&& ((buffer2_expected_prev[3] !== last_buffer2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[3] = buffer2_expected_prev[3];
	end
	if (
		( buffer2_expected_prev[4] !== 1'bx ) && ( buffer2_prev[4] !== buffer2_expected_prev[4] )
		&& ((buffer2_expected_prev[4] !== last_buffer2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[4] = buffer2_expected_prev[4];
	end
	if (
		( buffer2_expected_prev[5] !== 1'bx ) && ( buffer2_prev[5] !== buffer2_expected_prev[5] )
		&& ((buffer2_expected_prev[5] !== last_buffer2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[5] = buffer2_expected_prev[5];
	end
	if (
		( buffer2_expected_prev[6] !== 1'bx ) && ( buffer2_prev[6] !== buffer2_expected_prev[6] )
		&& ((buffer2_expected_prev[6] !== last_buffer2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[6] = buffer2_expected_prev[6];
	end
	if (
		( buffer2_expected_prev[7] !== 1'bx ) && ( buffer2_prev[7] !== buffer2_expected_prev[7] )
		&& ((buffer2_expected_prev[7] !== last_buffer2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[7] = buffer2_expected_prev[7];
	end
	if (
		( buffer2_expected_prev[8] !== 1'bx ) && ( buffer2_prev[8] !== buffer2_expected_prev[8] )
		&& ((buffer2_expected_prev[8] !== last_buffer2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[8] = buffer2_expected_prev[8];
	end
	if (
		( buffer2_expected_prev[9] !== 1'bx ) && ( buffer2_prev[9] !== buffer2_expected_prev[9] )
		&& ((buffer2_expected_prev[9] !== last_buffer2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[9] = buffer2_expected_prev[9];
	end
	if (
		( buffer2_expected_prev[10] !== 1'bx ) && ( buffer2_prev[10] !== buffer2_expected_prev[10] )
		&& ((buffer2_expected_prev[10] !== last_buffer2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[10] = buffer2_expected_prev[10];
	end
	if (
		( buffer2_expected_prev[11] !== 1'bx ) && ( buffer2_prev[11] !== buffer2_expected_prev[11] )
		&& ((buffer2_expected_prev[11] !== last_buffer2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[11] = buffer2_expected_prev[11];
	end
	if (
		( buffer2_expected_prev[12] !== 1'bx ) && ( buffer2_prev[12] !== buffer2_expected_prev[12] )
		&& ((buffer2_expected_prev[12] !== last_buffer2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[12] = buffer2_expected_prev[12];
	end
	if (
		( buffer2_expected_prev[13] !== 1'bx ) && ( buffer2_prev[13] !== buffer2_expected_prev[13] )
		&& ((buffer2_expected_prev[13] !== last_buffer2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[13] = buffer2_expected_prev[13];
	end
	if (
		( buffer2_expected_prev[14] !== 1'bx ) && ( buffer2_prev[14] !== buffer2_expected_prev[14] )
		&& ((buffer2_expected_prev[14] !== last_buffer2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[14] = buffer2_expected_prev[14];
	end
	if (
		( buffer2_expected_prev[15] !== 1'bx ) && ( buffer2_prev[15] !== buffer2_expected_prev[15] )
		&& ((buffer2_expected_prev[15] !== last_buffer2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[15] = buffer2_expected_prev[15];
	end
	if (
		( buffer2_expected_prev[16] !== 1'bx ) && ( buffer2_prev[16] !== buffer2_expected_prev[16] )
		&& ((buffer2_expected_prev[16] !== last_buffer2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[16] = buffer2_expected_prev[16];
	end
	if (
		( buffer2_expected_prev[17] !== 1'bx ) && ( buffer2_prev[17] !== buffer2_expected_prev[17] )
		&& ((buffer2_expected_prev[17] !== last_buffer2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[17] = buffer2_expected_prev[17];
	end
	if (
		( buffer2_expected_prev[18] !== 1'bx ) && ( buffer2_prev[18] !== buffer2_expected_prev[18] )
		&& ((buffer2_expected_prev[18] !== last_buffer2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer2_expected_prev);
		$display ("     Real value = %b", buffer2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_buffer2_exp[18] = buffer2_expected_prev[18];
	end
	if (
		( buffer3_expected_prev[0] !== 1'bx ) && ( buffer3_prev[0] !== buffer3_expected_prev[0] )
		&& ((buffer3_expected_prev[0] !== last_buffer3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[0] = buffer3_expected_prev[0];
	end
	if (
		( buffer3_expected_prev[1] !== 1'bx ) && ( buffer3_prev[1] !== buffer3_expected_prev[1] )
		&& ((buffer3_expected_prev[1] !== last_buffer3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[1] = buffer3_expected_prev[1];
	end
	if (
		( buffer3_expected_prev[2] !== 1'bx ) && ( buffer3_prev[2] !== buffer3_expected_prev[2] )
		&& ((buffer3_expected_prev[2] !== last_buffer3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[2] = buffer3_expected_prev[2];
	end
	if (
		( buffer3_expected_prev[3] !== 1'bx ) && ( buffer3_prev[3] !== buffer3_expected_prev[3] )
		&& ((buffer3_expected_prev[3] !== last_buffer3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[3] = buffer3_expected_prev[3];
	end
	if (
		( buffer3_expected_prev[4] !== 1'bx ) && ( buffer3_prev[4] !== buffer3_expected_prev[4] )
		&& ((buffer3_expected_prev[4] !== last_buffer3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[4] = buffer3_expected_prev[4];
	end
	if (
		( buffer3_expected_prev[5] !== 1'bx ) && ( buffer3_prev[5] !== buffer3_expected_prev[5] )
		&& ((buffer3_expected_prev[5] !== last_buffer3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[5] = buffer3_expected_prev[5];
	end
	if (
		( buffer3_expected_prev[6] !== 1'bx ) && ( buffer3_prev[6] !== buffer3_expected_prev[6] )
		&& ((buffer3_expected_prev[6] !== last_buffer3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[6] = buffer3_expected_prev[6];
	end
	if (
		( buffer3_expected_prev[7] !== 1'bx ) && ( buffer3_prev[7] !== buffer3_expected_prev[7] )
		&& ((buffer3_expected_prev[7] !== last_buffer3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[7] = buffer3_expected_prev[7];
	end
	if (
		( buffer3_expected_prev[8] !== 1'bx ) && ( buffer3_prev[8] !== buffer3_expected_prev[8] )
		&& ((buffer3_expected_prev[8] !== last_buffer3_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[8] = buffer3_expected_prev[8];
	end
	if (
		( buffer3_expected_prev[9] !== 1'bx ) && ( buffer3_prev[9] !== buffer3_expected_prev[9] )
		&& ((buffer3_expected_prev[9] !== last_buffer3_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[9] = buffer3_expected_prev[9];
	end
	if (
		( buffer3_expected_prev[10] !== 1'bx ) && ( buffer3_prev[10] !== buffer3_expected_prev[10] )
		&& ((buffer3_expected_prev[10] !== last_buffer3_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[10] = buffer3_expected_prev[10];
	end
	if (
		( buffer3_expected_prev[11] !== 1'bx ) && ( buffer3_prev[11] !== buffer3_expected_prev[11] )
		&& ((buffer3_expected_prev[11] !== last_buffer3_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[11] = buffer3_expected_prev[11];
	end
	if (
		( buffer3_expected_prev[12] !== 1'bx ) && ( buffer3_prev[12] !== buffer3_expected_prev[12] )
		&& ((buffer3_expected_prev[12] !== last_buffer3_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[12] = buffer3_expected_prev[12];
	end
	if (
		( buffer3_expected_prev[13] !== 1'bx ) && ( buffer3_prev[13] !== buffer3_expected_prev[13] )
		&& ((buffer3_expected_prev[13] !== last_buffer3_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[13] = buffer3_expected_prev[13];
	end
	if (
		( buffer3_expected_prev[14] !== 1'bx ) && ( buffer3_prev[14] !== buffer3_expected_prev[14] )
		&& ((buffer3_expected_prev[14] !== last_buffer3_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[14] = buffer3_expected_prev[14];
	end
	if (
		( buffer3_expected_prev[15] !== 1'bx ) && ( buffer3_prev[15] !== buffer3_expected_prev[15] )
		&& ((buffer3_expected_prev[15] !== last_buffer3_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[15] = buffer3_expected_prev[15];
	end
	if (
		( buffer3_expected_prev[16] !== 1'bx ) && ( buffer3_prev[16] !== buffer3_expected_prev[16] )
		&& ((buffer3_expected_prev[16] !== last_buffer3_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[16] = buffer3_expected_prev[16];
	end
	if (
		( buffer3_expected_prev[17] !== 1'bx ) && ( buffer3_prev[17] !== buffer3_expected_prev[17] )
		&& ((buffer3_expected_prev[17] !== last_buffer3_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[17] = buffer3_expected_prev[17];
	end
	if (
		( buffer3_expected_prev[18] !== 1'bx ) && ( buffer3_prev[18] !== buffer3_expected_prev[18] )
		&& ((buffer3_expected_prev[18] !== last_buffer3_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer3_expected_prev);
		$display ("     Real value = %b", buffer3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer3_exp[18] = buffer3_expected_prev[18];
	end
	if (
		( buffer4_expected_prev[0] !== 1'bx ) && ( buffer4_prev[0] !== buffer4_expected_prev[0] )
		&& ((buffer4_expected_prev[0] !== last_buffer4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[0] = buffer4_expected_prev[0];
	end
	if (
		( buffer4_expected_prev[1] !== 1'bx ) && ( buffer4_prev[1] !== buffer4_expected_prev[1] )
		&& ((buffer4_expected_prev[1] !== last_buffer4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[1] = buffer4_expected_prev[1];
	end
	if (
		( buffer4_expected_prev[2] !== 1'bx ) && ( buffer4_prev[2] !== buffer4_expected_prev[2] )
		&& ((buffer4_expected_prev[2] !== last_buffer4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[2] = buffer4_expected_prev[2];
	end
	if (
		( buffer4_expected_prev[3] !== 1'bx ) && ( buffer4_prev[3] !== buffer4_expected_prev[3] )
		&& ((buffer4_expected_prev[3] !== last_buffer4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[3] = buffer4_expected_prev[3];
	end
	if (
		( buffer4_expected_prev[4] !== 1'bx ) && ( buffer4_prev[4] !== buffer4_expected_prev[4] )
		&& ((buffer4_expected_prev[4] !== last_buffer4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[4] = buffer4_expected_prev[4];
	end
	if (
		( buffer4_expected_prev[5] !== 1'bx ) && ( buffer4_prev[5] !== buffer4_expected_prev[5] )
		&& ((buffer4_expected_prev[5] !== last_buffer4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[5] = buffer4_expected_prev[5];
	end
	if (
		( buffer4_expected_prev[6] !== 1'bx ) && ( buffer4_prev[6] !== buffer4_expected_prev[6] )
		&& ((buffer4_expected_prev[6] !== last_buffer4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[6] = buffer4_expected_prev[6];
	end
	if (
		( buffer4_expected_prev[7] !== 1'bx ) && ( buffer4_prev[7] !== buffer4_expected_prev[7] )
		&& ((buffer4_expected_prev[7] !== last_buffer4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[7] = buffer4_expected_prev[7];
	end
	if (
		( buffer4_expected_prev[8] !== 1'bx ) && ( buffer4_prev[8] !== buffer4_expected_prev[8] )
		&& ((buffer4_expected_prev[8] !== last_buffer4_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[8] = buffer4_expected_prev[8];
	end
	if (
		( buffer4_expected_prev[9] !== 1'bx ) && ( buffer4_prev[9] !== buffer4_expected_prev[9] )
		&& ((buffer4_expected_prev[9] !== last_buffer4_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[9] = buffer4_expected_prev[9];
	end
	if (
		( buffer4_expected_prev[10] !== 1'bx ) && ( buffer4_prev[10] !== buffer4_expected_prev[10] )
		&& ((buffer4_expected_prev[10] !== last_buffer4_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[10] = buffer4_expected_prev[10];
	end
	if (
		( buffer4_expected_prev[11] !== 1'bx ) && ( buffer4_prev[11] !== buffer4_expected_prev[11] )
		&& ((buffer4_expected_prev[11] !== last_buffer4_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[11] = buffer4_expected_prev[11];
	end
	if (
		( buffer4_expected_prev[12] !== 1'bx ) && ( buffer4_prev[12] !== buffer4_expected_prev[12] )
		&& ((buffer4_expected_prev[12] !== last_buffer4_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[12] = buffer4_expected_prev[12];
	end
	if (
		( buffer4_expected_prev[13] !== 1'bx ) && ( buffer4_prev[13] !== buffer4_expected_prev[13] )
		&& ((buffer4_expected_prev[13] !== last_buffer4_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[13] = buffer4_expected_prev[13];
	end
	if (
		( buffer4_expected_prev[14] !== 1'bx ) && ( buffer4_prev[14] !== buffer4_expected_prev[14] )
		&& ((buffer4_expected_prev[14] !== last_buffer4_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[14] = buffer4_expected_prev[14];
	end
	if (
		( buffer4_expected_prev[15] !== 1'bx ) && ( buffer4_prev[15] !== buffer4_expected_prev[15] )
		&& ((buffer4_expected_prev[15] !== last_buffer4_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[15] = buffer4_expected_prev[15];
	end
	if (
		( buffer4_expected_prev[16] !== 1'bx ) && ( buffer4_prev[16] !== buffer4_expected_prev[16] )
		&& ((buffer4_expected_prev[16] !== last_buffer4_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[16] = buffer4_expected_prev[16];
	end
	if (
		( buffer4_expected_prev[17] !== 1'bx ) && ( buffer4_prev[17] !== buffer4_expected_prev[17] )
		&& ((buffer4_expected_prev[17] !== last_buffer4_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[17] = buffer4_expected_prev[17];
	end
	if (
		( buffer4_expected_prev[18] !== 1'bx ) && ( buffer4_prev[18] !== buffer4_expected_prev[18] )
		&& ((buffer4_expected_prev[18] !== last_buffer4_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer4_expected_prev);
		$display ("     Real value = %b", buffer4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_buffer4_exp[18] = buffer4_expected_prev[18];
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module take_in_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key0;
reg key1;
reg start;
reg swa;
// wires                                               
wire [18:0] buffer1;
wire [18:0] buffer2;
wire [18:0] buffer3;
wire [18:0] buffer4;
wire [4:0] data;
wire drops;
wire [3:0] holder;
wire opener;
wire [4:0] outputer;
wire received_data;

wire sampler;                             

// assign statements (if any)                          
take_in i1 (
// port map - connection between master ports and signals/registers   
	.buffer1(buffer1),
	.buffer2(buffer2),
	.buffer3(buffer3),
	.buffer4(buffer4),
	.clk(clk),
	.data(data),
	.drops(drops),
	.holder(holder),
	.key0(key0),
	.key1(key1),
	.opener(opener),
	.outputer(outputer),
	.received_data(received_data),
	.start(start),
	.swa(swa)
);

// clk
initial
begin
	repeat(166)
	begin
		clk = 1'b0;
		clk = #3000 1'b1;
		# 3000;
	end
	clk = 1'b0;
	clk = #3000 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #30000 1'b1;
	start = #140000 1'b0;
	start = #30000 1'b1;
	start = #120000 1'b0;
	start = #30000 1'b1;
	start = #150000 1'b0;
	start = #30000 1'b1;
	start = #90000 1'b0;
	start = #30000 1'b1;
end 

// key0
initial
begin
	key0 = 1'b1;
	key0 = #40000 1'b0;
	key0 = #20000 1'b1;
	key0 = #10000 1'b0;
	key0 = #20000 1'b1;
	key0 = #120000 1'b0;
	key0 = #20000 1'b1;
	key0 = #20000 1'b0;
	key0 = #10000 1'b1;
	key0 = #30000 1'b0;
	key0 = #10000 1'b1;
	key0 = #60000 1'b0;
	key0 = #20000 1'b1;
	key0 = #20000 1'b0;
	key0 = #20000 1'b1;
	key0 = #20000 1'b0;
	key0 = #20000 1'b1;
	key0 = #20000 1'b0;
	key0 = #10000 1'b1;
	key0 = #50000 1'b0;
	key0 = #10000 1'b1;
	key0 = #10000 1'b0;
	key0 = #10000 1'b1;
	key0 = #90000 1'b0;
	key0 = #10000 1'b1;
end 

// key1
initial
begin
	key1 = 1'b1;
	key1 = #100000 1'b0;
	key1 = #20000 1'b1;
	key1 = #10000 1'b0;
	key1 = #20000 1'b1;
	key1 = #120000 1'b0;
	key1 = #10000 1'b1;
	key1 = #300000 1'b0;
	key1 = #10000 1'b1;
	key1 = #10000 1'b0;
	key1 = #10000 1'b1;
	key1 = #70000 1'b0;
	key1 = #10000 1'b1;
	key1 = #10000 1'b0;
	key1 = #10000 1'b1;
	key1 = #10000 1'b0;
	key1 = #10000 1'b1;
end 

// swa
initial
begin
	swa = 1'b0;
end 

take_in_vlg_sample_tst tb_sample (
	.clk(clk),
	.key0(key0),
	.key1(key1),
	.start(start),
	.swa(swa),
	.sampler_tx(sampler)
);

take_in_vlg_check_tst tb_out(
	.buffer1(buffer1),
	.buffer2(buffer2),
	.buffer3(buffer3),
	.buffer4(buffer4),
	.data(data),
	.drops(drops),
	.holder(holder),
	.opener(opener),
	.outputer(outputer),
	.received_data(received_data),
	.sampler_rx(sampler)
);
endmodule

